version: "3.9"

services:
  app:
    tty: true # Keep the container running
    restart: always
    image: ticket-booking
    container_name: ticket-booking
    build: .
    ports:
      - 3000:3000  # Maps port 3000 on your local machine to port 3000 in the container
    env_file:
      - .env
    networks:
      - application
    depends_on:
      db:
        condition: service_healthy  # Ensures that app only starts once db is healthy
    volumes:
      - .:/src/app  # Mounts the current directory (.) into the /src/app directory in the container
      - go-mod-cache:/go/pkg/mod  # Cache Go modules to avoid downloading them repeatedly during builds

    # Use `air` for local development (live reloading)
    command: air -c .air.toml

  db: 
    image: postgres:alpine
    container_name: ticket-booking-db
    environment:
      - POSTGRES_HOST=${DB_HOST}
      - POSTGRES_DB=${DB_NAME}
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    ports:
      - 5432:5432
    volumes:
      - postgres-db:/var/lib/postgresql/data  # Persists PostgreSQL data on a Docker volume
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # Run a custom SQL script during DB initialization
    networks:
      - application
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]  # Checks if PostgreSQL is accepting connections
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  application:

volumes:
  postgres-db:
  go-mod-cache:
